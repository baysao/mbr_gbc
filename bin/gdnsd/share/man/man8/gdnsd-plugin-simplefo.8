.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GDNSD-PLUGIN-SIMPLEFO 8"
.TH GDNSD-PLUGIN-SIMPLEFO 8 "2023-01-13" "gdnsd 3.8.0" "gdnsd"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gdnsd\-plugin\-simplefo \- gdnsd plugin for simple primary\->secondary address
failover
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Example gdnsd config fragment using this plugin:
.PP
.Vb 10
\&  plugins => {
\&    simplefo => {
\&      service_types => [ www ],
\&      pubwww => {
\&        primary => 192.0.2.1
\&        secondary => 192.0.2.100
\&      }
\&      www6 => {
\&        primary => 2001:DB8::1
\&        secondary => 2001:DB8::100
\&      }
\&      mixed => {
\&        service_types => [ www, xmpp ]
\&        addrs_v4 => {
\&          primary => 192.0.2.1
\&          secondary => 192.0.2.100
\&        }
\&        addrs_v6 => {
\&          service_types => up
\&          primary => 2001:DB8::1
\&          secondary => 2001:DB8::100
\&        }
\&      }
\&    }
\&  }
.Ve
.PP
Example zonefile RRs:
.PP
.Vb 3
\&  www 180 DYNA simplefo!pubwww
\&  www6 180 DYNA simplefo!www6
\&  mix 180 DYNA simplefo!mixed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBgdnsd-plugin-simplefo\fR is designed to do simple active/passive
failover between one primary address and one secondary address.
The status of the addresses are checked with standard gdnsd
\&\f(CW\*(C`service_types\*(C'\fR monitoring.  If you need more than a simple
two-address failover list, the \f(CW\*(C`metafo\*(C'\fR plugin is more appropriate.
.SH "TOP-LEVEL PLUGIN CONFIG"
.IX Header "TOP-LEVEL PLUGIN CONFIG"
At the top level of the plugin's configuration stanza, the special
parameter \f(CW\*(C`service_types\*(C'\fR is supported. These sets the default
per-resource \f(CW\*(C`service_types\*(C'\fR for all resources.  The default default
\&\f(CW\*(C`service_types\*(C'\fR is \f(CW\*(C`[ up ]\*(C'\fR, which simply sets them all \f(CW\*(C`UP\*(C'\fR
statically.
.PP
The rest of the hash entries at the top level are the names of the
resources you define.  Each resource gets a configuration hash of its own
for containing resource-specific address info.
.SH "RESOURCE CONFIG"
.IX Header "RESOURCE CONFIG"
Within a resource, \f(CW\*(C`service_types\*(C'\fR is again supported, to set the
monitored service type(s) for this specific resource.
.PP
If \f(CW\*(C`addrs_v4\*(C'\fR is defined, it must be a hash containing two keys:
\&\f(CW\*(C`primary\*(C'\fR and \f(CW\*(C`secondary\*(C'\fR, each of which has an IPv4 string address value.
.PP
Similarly, if \f(CW\*(C`addrs_v6\*(C'\fR is defined, it must be a hash containing two
keys: \f(CW\*(C`primary\*(C'\fR and \f(CW\*(C`secondary\*(C'\fR, each of which has an IPv6 string address
value.
.PP
If neither of those two sub-stanzas is defined, you must define a single
pair of \f(CW\*(C`primary\*(C'\fR and \f(CW\*(C`secondary\*(C'\fR addresses for the whole resource.
These can be of either address family, so long as they are both the same
family.
.PP
When \f(CW\*(C`addrs_v4\*(C'\fR and/or \f(CW\*(C`addrs_v6\*(C'\fR are used, \f(CW\*(C`service_types\*(C'\fR can also be
overridden within each, for different behavior per-address-family (e.g.
force one protocol always up/down).
.SH "OPERATIONAL MECHANICS"
.IX Header "OPERATIONAL MECHANICS"
For each address family for which you have supplied data, the following
logic is applied independently:
.IP "\(bu" 4
First, the worst monitored state of all \f(CW\*(C`service_types\*(C'\fR checks for
the primary address is obtained.  If this state is \f(CW\*(C`UP\*(C'\fR, the
primary address is used.
.IP "\(bu" 4
If the primary address was \f(CW\*(C`DOWN\*(C'\fR, the secondary address is
checked: If the secondary is \f(CW\*(C`UP\*(C'\fR, it will be used.  If the
secondary is also \f(CW\*(C`DOWN\*(C'\fR, then the primary is used.
.IP "\(bu" 4
In any case other than the primary being exactly \f(CW\*(C`UP\*(C'\fR, the
response RR-set \s-1TTL\s0 from the zonefile will be cut in half for both address
families.
.PP
If both \f(CW\*(C`primary\*(C'\fR and \f(CW\*(C`secondary\*(C'\fR were \f(CW\*(C`DOWN\*(C'\fR for \fBeither\fR address
family, this plugin will signal total resource failure to any upstream
module (geoip or metafo).  The cutting of the \s-1TTL\s0 only happens once for all
address RRs, even if both families had a non\-\f(CW\*(C`UP\*(C'\fR primary.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBgdnsd.config\fR\|(5), \fBgdnsd.zonefile\fR\|(5), \fBgdnsd\fR\|(8),
\&\fBgdnsd\-plugin\-multifo\fR\|(8)
.PP
The gdnsd manual.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2012 Brandon L Black <blblack@gmail.com>
.PP
This file is part of gdnsd.
.PP
gdnsd is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.PP
gdnsd is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with gdnsd.  If not, see <http://www.gnu.org/licenses/>.
